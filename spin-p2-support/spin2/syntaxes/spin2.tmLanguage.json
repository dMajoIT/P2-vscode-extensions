{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "spin2",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#block" }
	],
	"repository": {
		"array_index": {
			"name": "meta.array.index.spin2",
			"match": "(\\[)(.*?)(\\])",
			"captures": {
				"1": { "name": "keyword.operator.spin2" },
				"2": { "patterns": [ { "include": "#number" } ] },
				"3": { "name": "keyword.operator.spin2" }
			}
        },
        "assembly_language_hold": {
			"name": "meta.block.assembly.language.spin2",
			"begin": "(?i)\\bORG\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#constant" },
				{ "include": "#register" },
				{ "include": "#array_index" },
				{ "include": "#number" },
				{ "include": "#string" },
                { "include": "#debug_functions" },
				{
					"name": "just.junk.stuff.here",
					"match": "(?i)\\b(ORG(F|H)?|FIT|ALIGNW|ALIGNL)\\b"
                }
            ]
        },
		"debug_functions_hold": {
			"name": "support.function.debug.methods.spin2",
			"match": "(?i)\\b((S|U)(DEC|HEX|BIN)(_BYTE|_LONG|_WORD|_REG_ARRAY|_BYTE_ARRAY|_LONG_ARRAY|_WORD_ARRAY)?(_)?)|IF(NOT)?|(ZSTR(_)?)|(LSTR(_)?)|debug\\b"
		},
		"assembly_language": {
			"name": "meta.block.assembly.language.spin2",
			"begin": "(?i)\\bORG\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#constant" },
				{ "include": "#register" },
				{ "include": "#array_index" },
				{ "include": "#number" },
				{ "include": "#string" },
                { "include": "#debug_functions" },
				{
					"name": "keyword.pasm.control.directive.pasm2",
					"match": "(?i)\\b(ORG(F|H)?|FIT|ALIGN(W|L))\\b"
				},
				{
					"name": "keyword.pasm.control.configuration.pasm2",
					"match": "(?i)\\bCLKSET\\b"
				},
				{
					"name": "storage.type.pasm2",
					"match": "(?i)\\b(BYTE|WORD|LONG|RES)\b"
				},
				{
					"name": "keyword.pasm.control.cog.pasm2",
					"match": "(?i)\\bCOG(ID|NEW|INIT|STOP)\\b"
				},
				{
					"name": "keyword.pasm.control.interrupts.pasm2",
					"match": "(?i)\\b((STALL|ALLOW)I|(TRG|NIX|SET)INT(1|2|3)|(GET|COG)BRK|BRK|(RES|RET)I(0|1|2|3))\\b"
				},
				{
					"name": "keyword.pasm.control.process.pasm2",
					"match": "(?i)\\b(LOCK(NEW|RET|CLR|SET)|WAIT(CNT|PEQ|PNE|VID))\\b"
				},
				{
					"name": "keyword.pasm.control.q.register.pasm2",
					"match": "(?i)\\b(SETQ2?|GETQ(X|Y))\\b"
				},
				{
					"name": "keyword.pasm.control.alter.following.pasm2",
					"match": "(?i)\\b(AUG(S|D)|ALT(SN|GN|SB|GB|SW|GW|R|D|S|B|I))\\b"
				},
				{
					"name": "keyword.pasm.control.flow.pasm2",
					"match": "(?i)\\b(PUSH|POP|(CALL|RET)(A|B)?|JMP(REL)?|SKIP|(SKIP|EXEC)F|CALL(D|PA|PB)|DJ(N?F|N?Z)|WAITX|(POLL|WAIT)(INT|CT(1|2|3)|SE(1|2|3|4)|PAT|FBW|XMT|XFI|XRO|XRL|ATN))\\b"
				},
				{
					"name": "keyword.pasm.control.instruction.prefixes.pasm2",
					"match": "(?i)\\b(_RET_|IF_(0|1)(0|1|X)|IF_(A|B)E?|IF_N?(C|Z|E)|IF_N?C_(AND|OR)_N?Z|IF_C_(EQ|NE)_Z|IF_(DIFF|SAME)|IF_NOT_(0|1)(0|1)|IF_N?Z_(AND|OR)_N?C|IF_Z_(EQ|NE)_C|IF_X(0|1))\\b"
				},
				{
					"name": "keyword.pasm.control.effects.pasm2",
					"match": "(?i)\\b(W(C|Z|CZ)|AND(C|Z)|OR(C|Z)|XOR(C|Z))\\b"
				},
				{
					"name": "keyword.pasm.instruction.hubaccess.pasm2",
					"match": "(?i)\\b((RD|WR|RF|WF|SET|GET|ROL)(BYTE|WORD)|(WR|RF|WF|WM|RD)LONG)\\b"
				},
				{
					"name": "keyword.pasm.instruction.math.logic.pasm2",
					"match": "(?i)\\bMUX(N?C|N?Z|Q|NITS|NIBS)\\b"
				},
				{
					"name": "keyword.pasm.instruction.basic.pasm2",
					"match": "(?i)\\b(ABS(NEG)?|NEGN?(C|Z)?|MINS?|MAXS?|ADD(ABS|S|X|SX)?|SUB(ABS|S|X|SX)?|SUMN?(C|Z)?|MULS?|ANDN?|X?OR|ONES|ENC|RC(L|R)|REV|RO(L|R)|SH(L|R)|SAR|CMPS?X?|CMPSUB|TESTN?|MOV(S|D|I)?|MUXN?(C|Z)?|HUBOP|NOP)\\b"
				},
				{
					"name": "keyword.operator.pasm2",
					"match": "(?i)(\\+|-|\\^\\^|\\|\\||\\|<|>\\||!|@|\\*\\*?|//?|#>|<#|~>|<<|>>|<-|->|><|&|\\||\\^|AND|OR|==|<>|<|>|=<|=>)"
				},
				{
					"name": "keyword.pasm.instruction.cog.attention.pasm2",
                    "match": "(?i)\\b(COG|POLL|WAIT|J|JN)ATN\\b"
				},
				{
					"name": "keyword.pasm.instruction.lut.pasm2",
					"match": "(?i)\\b(LUTS(OFF|ON)|SETLUTS)\\b"
				},
				{
					"name": "keyword.pasm.instruction.pins.io.pasm2",
					"match": "(?i)\\b((DIR|DRV|OUT|FLT)(L|H|C|NC|Z|NZ|RND|NOT)|TESTPN?)\\b"
				}
			]
		},
		"binary_number": {
			"name": "constant.numeric.binary.spin2",
			"match": "(%[01][01_]*)\\b",
			"captures": {
				"1": { "name": "constant.numeric.base.spin2" }
			}
		},
		"block": {
			"name": "meta.block.spin2",
			"patterns": [
				{ "include": "#constant_block" },
				{ "include": "#variable_block" },
				{ "include": "#object_block" },
				{ "include": "#public_block" },
				{ "include": "#private_block" },
				{ "include": "#data_block" }
			]
		},
		"block_comment": {
			"name": "comment.block.spin2",
			"begin": "{",
			"end": "}"
		},
		"cog": {
			"name": "keyword.control.cog.spin2",
			"match": "(?i)\\b(COG(ID|NEW|INIT|STOP)|REBOOT)\\b"
		},
		"comment": {
			"patterns": [
				{ "include": "#doc_block_comment" },
				{ "include": "#block_comment" },
				{ "include": "#doc_line_comment" },
				{ "include": "#line_comment" }
			]
		},
		"configuration": {
			"name": "keyword.control.configuration.spin2",
			"match": "(?i)\\b(CHIPVER|_?CLKMODE|_?CLKFREQ|CLKSET|_XINFREQ|_STACK|_FREE|RCFAST|RCSLOW|XINPUT|XTAL[1-3]|PLL(1|2|4|8|16)X)\\b"
		},
		"constant": {
			"name": "constant.language.spin2",
			"match": "(?i)\\b(TRUE|FALSE|POSX|NEGX|PI)\\b"
		},
		"constant_block": {
			"name": "meta.block.constant.spin2",
			"begin": "(?i)^CON\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.block.con.spin2" }
			},
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#configuration" },
				{
					"match": "(?i)\\b((\\w|_)+)\\s*(=)\\s*(.*)\\s*",
					"captures": {
						"1": { "name": "entity.name.constant.spin2" },
						"3": { "name": "keyword.operator.assignment.spin2" },
						"4": {
							"patterns": [
								{ "include": "#number" },
								{ "include": "#string" },
                                { "include": "#constant" }
							]
						}
					}
				}
			]
		},
		"data_block": {
			"name": "meta.block.data.spin2",
			"begin": "(?i)^DAT\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.block.dat.spin2" }
			},
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#constants" },
				{ "include": "#string" },
                { "include": "#number" },
                { "include": "#debug_functions" },
                { "include": "#assembly_language" },
                {
                    "match": "(?i)\\b((\\w|_)+)\\b",
                    "captures": {
                        "1": { "name": "variable.name.spin2" }
                    }
                },
                {
                    "match": "(?i)\\b((\\w|_)+)\\s*\\b(byte|word|long|res)\\b(\\[.*\\])?\\b",
                    "captures": {
                        "1": { "name": "variable.name.spin2" },
                        "3": { "name": "storage.type.spin2" },
                        "4": {
                            "patterns": [ 
								{ "include": "#number" },
                                { "include": "#constants" },
                                { "include": "#array_index" }
                            ]
                        }
                    }
                },
                {
                    "match": "(?i)\\s*\\b(byte|word|long|res)\\b(\\[.*\\])?",
                    "captures": {
                        "1": { "name": "storage.type.spin2" },
                        "2": { 
                            "patterns": [
								{ "include": "#number" },
                                { "include": "#constants" },
                                { "include": "#array_index" }
                            ]
                        }
                    }
                }
			]
        },
		"debug_functions": {
			"name": "support.function.debug.methods.spin2",
			"match": "(?i)\\b((S|U)(DEC|HEX|BIN)(_BYTE|_LONG|_WORD|_REG_ARRAY|_BYTE_ARRAY|_LONG_ARRAY|_WORD_ARRAY)?(_)?|IFNOT|ZSTR(_)?|LSTR(_)?|debug)\\b"
		},
		"decimal_number": {
			"name": "constant.numeric.decimal.spin2",
			"match": "\\d+"
		},
		"directives": {
			"name": "keyword.control.directive.spin2",
			"match": "(?i)\\b(STRING|CONSTANT|FLOAT|ROUND|TRUNC|FILE)\\b"
		},
		"doc_block_comment": {
			"name": "comment.block.documentation.spin2",
			"begin": "{{",
			"end": "}}"
		},
		"doc_line_comment": {
			"name": "comment.line.documentation.spin2",
			"match": "''.*$"
        },
        "flow_control" : {
			"name": "keyword.control.spin1.spin2",
			"match": "(?i)\\b(IF|ELSEIF|ELSEIFNOT|ELSE|IFNOT|CASE|OTHER|REPEAT|FROM|TO|STEP|UNIT|WHILE|NEXT|QUIT|RETURN|ABORT)\\b"
		},
		"hexadecimal_number": {
			"name": "constant.numeric.hexadecimal.spin2",
			"match": "(\\$[0-9a-fA-F][0-9a-fA-F_]*)\\b",
			"captures": {
				"1": { "name": "constant.numeric.base.spin2" }
			}
		},
		"inline_assembly": {
			"name": "meta.block.inline.assembly.spin2",
			"begin": "(?i)\\bORG\\b",
			"end": "(?i)\\bEND\\b",
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#constant" },
				{ "include": "#register" },
				{ "include": "#array_index" },
				{ "include": "#number" },
                { "include": "#debug_functions" }
			]
		},
		"line_comment": {
			"name": "comment.line.spin2",
			"match": "'.*$"
		},
		"memory": {
			"name": "keyword.control.memory.spin2",
			"match": "(?i)\\b((BYTE|WORD|LONG)(FILL|MOVE)|LOOK(UP?Z|DOWN?Z)|STR(SIZE|CMP))\\b"
		},
		"number": {
			"patterns": [
				{ "include": "#quaternary_number" },
				{ "include": "#binary_number" },
				{ "include": "#hexadecimal_number" },
				{ "include": "#decimal_number" }
			]
		},
		"object_block": {
			"name": "meta.block.object.spin2",
			"begin": "(?i)^OBJ\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.block.obj.spin2" }
			},
			"patterns": [
				{ "include": "#comment" },
				{
					"name": "meta.object-initialization.spin2",
					"match": "\\b((\\w|_)+)(\\[.*\\])?\\s*(:)\\s*((\\\")(\\.|[^\"])*(\\\"))",
                        "captures": {
                            "1": { "name": "entity.name.object.spin2" },
                            "3": { "patterns": [ { "include": "#array_index" } ] },
                            "4": { "name": "punctuation.spin2" },
                            "5": { "name": "meta.object.filename.spin2" },
                            "6": { "name": "punctuation.spin2" },
                            "8": { "name": "punctuation.spin2" }
                        }
				}
			]
		},
		"operator": {
			"name": "keyword.operator.spin2",
			"match": "(?i)\\b(\\+(\\+|=)?|-(-|=)?|\\^(\\^|=)?|\\|(\\||=)?|~(~|>)?=?|\\?|\\|<|>\\||!|NOT|@@?|:?=|\\*(\\*|=)?|/(/|=)?|#>=?|<#=?|<<?=?|>>?=?|<-=?|->=?|><=?|&=|AND=?|OR=?|===?|<>=?|=[<>]=?)\\b"
		},
		"private_block": {
			"name": "meta.block.private.spin2",
			"begin": "(?i)^PRI\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.block.pri.spin2" }
			},
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#constant" },
				{ "include": "#directives" },
				{ "include": "#flow_control" },
				{ "include": "#array_index" },
				{ "include": "#number" },
				{ "include": "#configuration" },
				{ "include": "#cog" },
				{ "include": "#memory" },
				{ "include": "#operator" },
				{ "include": "#register" },
				{ "include": "#return" },
                { "include": "#string" },
                { "include": "#debug_functions" }
			]
		},
		"public_block": {
			"name": "meta.block.public.spin",
            "begin": "(?i)^(PUB)(?:\\s+((?:\\w|\\d)+)(?:(\\()(.*)(\\)))?\\s*(?:(\\:)\\s*((\\w|_)+))?\\s*(?:(\\|)\\s*((\\w|_)+))?)?",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"beginCaptures": {
				"1": { "name": "keyword.block.pub.spin" },
				"2": { "name": "entity.name.function.spin" },
				"3": { "name": "punctuation.spin" },
				"4": { "name": "meta.parameter.spin" },
				"5": { "name": "punctuation.spin" },
				"6": { "name": "punctuation.spin" },
				"7": { "name": "meta.return-type.spin" }
			},
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#constant" },
				{ "include": "#directives" },
				{ "include": "#flow_control" },
				{ "include": "#array_index" },
				{ "include": "#number" },
				{ "include": "#configuration" },
				{ "include": "#cog" },
				{ "include": "#memory" },
				{ "include": "#operator" },
				{ "include": "#register" },
				{ "include": "#return" },
				{ "include": "#string" },
                { "include": "#debug_functions" }
			]
		},
		"quaternary_number": {
			"name": "constant.numeric.quaternary.spin2",
			"match": "(%%[0-3][0-3_]*)\\b",
			"captures": {
				"1": { "name": "constant.numeric.base.spin2" }
			}
		},
		"register": {
			"name": "variable.language.cog.register.spin2",
			"match": "(?i)\\b(DIR(A|B)|IN(A|B)|OUT(A|B)|IJMP(1|2|3)|IRET(1|2|3)|P(A|B)|PTR(A|B)|PR(0|1|2|3|4|5|6|7))\\b"
		},
		"return": {
			"name": "variable.language.return.spin2",
			"match": "(?i)\\breturn\\b"
		},
		"string": {
			"name": "string.quoted.double.spin2",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.spin2",
					"match": "\\\\."
				}
            ]
        },
		"variable_block": {
			"name": "meta.block.variable.spin2",
			"begin": "(?i)^VAR\\b",
			"end": "(?i)^(?=(CON|VAR|OBJ|PUB|PRI|DAT))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.block.var.spin2" }
			},
			"patterns": [
				{ "include": "#comment" },
				{
					"match": "(?i)\\b(byte|word|long)\\s*((\\w|_)+)(\\[.*\\])?",
					"captures": {
						"1": { "name": "storage.type.spin2" },
						"2": { "name": "variable.name.spin2" },
						"4": { "patterns": [ { "include": "#array_index" } ] }
					}
				}
			]
		}
	},
	"scopeName": "source.spin2"
}