{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Spin1",
	"patterns": [
		{ "include": "#section"       },
		{ "include": "#comment"       },
		{ "include": "#constant"      },
		{ "include": "#language"      }
	],
	"repository": {
		"section": {
			"patterns": [
				{
					"name": "entity.name.section.con.spin",
					"match": "(?i)^CON\\b"
				},
				{
					"name": "entity.name.section.var.spin",
					"match": "(?i)^VAR\\b"
				},
				{
					"name": "entity.name.section.obj.spin",
					"match": "(?i)^OBJ\\b"
				},
				{
					"name": "entity.name.section.pub.spin",
					"match": "(?i)^PUB\\b"
				},
				{
					"name": "entity.name.section.pri.spin",
					"match": "(?i)^PRI\\b"
				},
				{
					"name": "entity.name.section.dat.spin",
					"match": "(?i)^DAT\\b"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.spin",
					"match": "''.*"
				},
				{
					"name": "comment.line.spin",
					"match": "'.*"
				},
				{
					"name": "comment.block.spin",
					"begin": "{{",
					"end": "}}"
				},
				{
					"name": "comment.block.spin",
					"begin": "{",
					"end": "}"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"name": "string.spin",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "constant.character.escape.spin",
					"match": "#"
				},
				{
					"name": "constant.numeric.decimal.spin",
					"match": "[0-9_]+"
				},
				{
					"name": "constant.numeric.hexadecimal.spin",
					"match": "\\$[0-9A-Fa-f_]+"
				},
				{
					"name": "constant.numeric.nibble.spin",
					"match": "\\%\\%[0-3_]+"
				},
				{
					"name": "constant.numeric.binary.spin",
					"match": "\\%[0-1_]+"
				},
				{
					"name": "constant.character.escape.spin",
					"match": "(?i)\\b(TRUE|FALSE|POSX|NEGX|PI)\\b"
				}
			]
		},
		"language": {
			"patterns": [
				{
					"name": "keyword.other.directive.spin",
					"match": "(?i)\\b(ORG|FIT)\\b"
				},
				{
					"name": "keyword.control.spin",
					"match": "\\s(?i:(_|IF_)((C|NC)_(AND|OR)_(Z|NZ)|(Z|NZ)_(AND|OR)_(C|NC)|C_(EQ|NE)_Z|Z_(EQ|NE)_C|CLR|Z|NZ|E|NE|DIFF|C|NC|LT|B|LE|GE|GT|A|SET|(0|1|X)(0|1|X)))\\s"
				},
				{
					"name": "keyword.operator.spin",
					"match": "\\s(?i:NOP|AND|ANDN|OR|XOR|MOV|MOV(S|D|I)|ABS|ABSNEG|ROL|ROR|SHL|SHR|RCL|RCR|SAR|REV|ADD|SUB|CMP|CMPSUB|(ADD|SUB)ABS|(ADD|SUB|CMP)(X|S|SX)|TEST|TESTN|SUM|MUX|NEG|(SUM|MUX|NEG)(C|NC|Z|NZ)|MAX|MAXS|MIN|MINS|(RD|WR)(BYTE|WORD|LONG)|DJNZ|TJ(Z|NZ)|CALL|RET|JMP|JMPRET|WAIT(CNT|PEQ|PNE|VID)|COG(ID|INIT|NEW|STOP)|LOCK(CLR|NEW|RET|SET)|HUBOP|CLKSET)\\s"
				},
				{
					"name": "keyword.other.storage.spin",
					"match": "(?i)\\b(BYTE|WORD|LONG|RES)\\b"
				},
				{
					"name": "keyword.other.register.spin",
					"match": "(?i)\\b(PAR|CNT|(OUT|IN|DIR|CTR|PHS|FRQ)(A|B)|VCFG|VSCL|SPR)\\b"
				},
				{
					"name": "keyword.control.spin",
					"match": "\\s(?i:WC|WZ|WR|NR)\\s"
				},
				{
					"name": "keyword.other.reserved.spin",
					"match": "(?i)\\b(CHIPVER|CLKFREQ|CLKMODE|CLKSET|CONSTANT|FILE|_(CLKFREQ|CLKMODE|XINFREQ|FREE|STACK)|RC(FAST|SLOW)|XINPUT|XTAL(1|2|3)|PLL(1|2|4|8|16)X)\\b"
				},
				{
					"name": "keyword.operator.binary.spin",
					"match": "(?i)(=|:=|\\+=?|\\-=?|\\*\\*?=?|//?=?|#>=?|<#=?|~>=?|<<=?|>>=?|<-=?|->=?|><=?|\\&=?)"
				},
				{
					"name": "keyword.operator.unary.spin",
					"match": "(?i)(\\+\\+?|\\-\\-?|\\^\\^|\\|\\||~~?|\\?|\\|<|>\\||!|NOT|@@?)"
				},
				{
					"name": "keyword.operator.spin1.spin",
					"match": "(?i)\\b(COG(ID|INIT|NEW|STOP)|LOCK(CLR|NEW|RET|SET)|(BYTE|WORD|LONG(FILL|MOVE)|LOOK(DOWN|DOWNZ|UP|UPZ)|STRING|STRCOMP|STRSIZE)|ROUND|TRUNC|FLOAT|WAIT(CNT|PEQ|PNE|VID))\\b"
				},
				{
					"name": "keyword.control.spin1.spin",
					"match": "(?i)\\b(REPEAT|IF|IFNOT|ELSE|ELSEIF|ELSEIFNOT|CASE|FROM|TO|UNTIL|WHILE|OTHER|NEXT|RESULT|RETURN|QUIT|ABORT|REBOOT)\\b"
				}
			]
		}
	},
"scopeName": "source.spin1"
}